#+STARTUP: indent
* 通讯协议
** 结构定义
#+begin_src lisp :tangle /dev/shm/card-reader/protocol.tr
  (struct card-payload
    (byte 0 reader-id) ;; 读卡器 ID
    (byte 1 cmd) ;; 命令编号
    (int 2 sn) ;; 当前请求序列号
    (int 3 card) ;; 卡编号
    (byte 4 door) ;; 门编号(0~255)
    (short 5 audio) ;; 音频编号
    (int 6 token) ;; Token
    (byte 7 volume) ;; 音量大小(0~31)
    (int 8 long-door) ;; 长门编号(< 99999)
    )
#+end_src
** 数据封包
#+begin_src c :tangle /dev/shm/card-reader/packet.h
  #ifndef __CARD_READER_PACKET_H
  #define __CARD_READER_PACKET_H
  #include <stdint.h>
  #include "card_payload.h"
  #include "common_payload.h"

  #define _populate_packet_to_tx_1(packet, tx, line) do {                 \
      uint32_t elen##line = packet_calculate_encode_size(packet);         \
      uint8_t ebuf##line[elen##line];                                     \
      uint8_t size_of_len##line = 0;                                      \
      if (elen##line < 128) {                                             \
        size_of_len##line = 1;                                            \
      } else if (elen##line < 16384) {                                    \
        size_of_len##line = 2;                                            \
      } else if (elen##line < 2097152) {                                  \
        size_of_len##line = 3;                                            \
      } else {                                                            \
        size_of_len##line = 4;                                            \
      }                                                                   \
      if (ring_available(tx) >= elen##line + size_of_len##line) {         \
        bzero(ebuf##line, elen##line);                                    \
        uint32_t len##line = packet_encode(packet, ebuf##line, elen##line); \
        elen##line = len##line;                                           \
        while (elen##line > 0) {                                          \
          ring_write(tx, elen##line & 0x7F);                              \
          elen##line = elen##line >> 7;                                   \
        }                                                                 \
        ring_write_array(tx, ebuf##line, 0, len##line);                   \
      }                                                                   \
    } while (0)

  #define _populate_packet_to_tx_0(packet, tx, line) _populate_packet_to_tx_1(packet, tx, line)

  #define populate_packet_to_tx(packet, tx) _populate_packet_to_tx_0(packet, tx, __LINE__)

  typedef enum DEV_TYPE {
    CARD_READER = 0x10,
    EGG = 0x20,
    COMMON = 0x70,
  } dev_type_t;

  typedef enum CMD_TYPE {
    UNKNOWN = 0x00,
    ERROR = 0x01,
    PING = 0x02,
    ONLINE = 0x03,
    OFFLINE = 0x04,
    CARD_LOCK_OFF = 0x05,
    PLAY = 0x06,
    VOLUME_UP = 0x07,
    VOLUME_DOWN = 0x08,
    TOKEN_LOCK_OFF = 0x09,
    BLOCK = 0x0A,
    VOLUME = 0x0B,
  } cmd_type_t;

  struct packet_t {
    uint8_t dev_type;
    uint8_t devid;
    union {
      card_payload_t card_reader;
      common_payload_t common;
    } payload;
  };

  uint32_t packet_calculate_encode_size(struct packet_t * packet);
  uint32_t packet_encode(struct packet_t * packet, uint8_t * buf, uint32_t size);
  uint32_t packet_estimate_decode_size(uint8_t * buf, uint32_t size);
  dev_type_t packet_decode(uint8_t * buf, uint32_t size, uint32_t estimated, struct packet_t * packet);
  #endif
#+end_src
#+begin_src c :tangle /dev/shm/card-reader/packet.c
  #include "packet.h"
  #include "hash.h"


  /*
    packet layout:

            +-+-+-+-+-+-+-+-+
    byte 0  |1|0|1|0|0|1|0|1|   magic number 0
            +-+-+-+-+-+-+-+-+

            +-+-+-+-+-+-+-+-+
    byte 1  |0|1|0|1|1|0|1|0|   magic number 1
            +-+-+-+-+-+-+-+-+

            +-+-+-+-+-+-+-+-+
    byte 2  |x|x|x|x|x|x|x|x|   adle32-0 of data
            +-+-+-+-+-+-+-+-+

            +-+-+-+-+-+-+-+-+
    byte 3  |x|x|x|x|x|x|x|x|   adle32-1 of data
            +-+-+-+-+-+-+-+-+

            +-+-+-+-+-+-+-+-+
    byte 4  |x|x|x|x|x|x|x|x|   adle32-2 of data
            +-+-+-+-+-+-+-+-+

            +-+-+-+-+-+-+-+-+
    byte 5  |x|x|x|x|x|x|x|x|   adle32-3 of data
            +-+-+-+-+-+-+-+-+

            +-+-+-+-+-+-+-+-+
    byte 6  |x|x|x|x|x|x|x|x|   type (4 bit) and id (4 bit)
            +-+-+-+-+-+-+-+-+

            +-+-+-+-+-+-+-+-+
    byte 7  |x|x|x|x|x|x|x|x|   length of data
            +-+-+-+-+-+-+-+-+

            +-+-+-+-+-+-+-+-+
    byte 8  |x|x|x|x|x|x|x|x|   begin of data
            +-+-+-+-+-+-+-+-+
                    .
                    .
                    .
            +-+-+-+-+-+-+-+-+
    byte n  |x|x|x|x|x|x|x|x|   end of data
            +-+-+-+-+-+-+-+-+

  ,*/


  #define PACKET_META_SIZE (2 + 4 + 1 + 1) // magic number + checksum + type and id + length

  uint32_t packet_calculate_encode_size(struct packet_t * packet) {
    switch (packet->dev_type) {
    case CARD_READER: return card_payload_calculate_size(&packet->payload.card_reader) + PACKET_META_SIZE;
    case COMMON: return common_payload_calculate_size(&packet->payload.common) + PACKET_META_SIZE;
    default: return 0;
    }
  }

  uint32_t packet_encode(struct packet_t * packet, uint8_t * buf, uint32_t size) {
    buf[0] = 0xA5;
    buf[1] = 0x5A;
    buf[6] = packet->dev_type | packet->devid;
    switch (packet->dev_type) {
    case CARD_READER:
      buf[7] = card_payload_encode_zeropack(&packet->payload.card_reader, buf + PACKET_META_SIZE, size - PACKET_META_SIZE);
      break;
    case COMMON:
      buf[7] = common_payload_encode_zeropack(&packet->payload.common, buf + PACKET_META_SIZE, size - PACKET_META_SIZE);
      break;
    default:
      buf[7] = 0;
      break;
    }
    uint32_t checksum = adler32(buf + 2 + 4, buf[7] + 2); // include type and id, length
    buf[2] = checksum & 0xFF;
    buf[3] = (checksum >> 8) & 0xFF;
    buf[4] = (checksum >> 16) & 0xFF;
    buf[5] = (checksum >> 24) & 0xFF;
    return buf[7] + PACKET_META_SIZE;
  }

  uint32_t packet_estimate_decode_size(uint8_t * buf, uint32_t size) {
    if (size <= PACKET_META_SIZE) return 0;
    if (buf[0] != 0xA5 || buf[1] != 0x5A) {
      return 0;
    }
    uint32_t len = buf[7];
    if (len + PACKET_META_SIZE > size) return 0;
    uint32_t checksum = adler32(buf + 2 + 4, len + 2);
    if ((buf[2] == (checksum & 0xFF)) &&
        (buf[3] == ((checksum >> 8) & 0xFF)) &&
        (buf[4] == ((checksum >> 16) & 0xFF)) &&
        (buf[5] == ((checksum >> 24) & 0xFF))) {
      switch (buf[6] & 0x70) {
      case CARD_READER:
        return card_payload_estimate_zeropack_size(buf + PACKET_META_SIZE, len) + PACKET_META_SIZE;
      case COMMON:
        return common_payload_estimate_zeropack_size(buf + PACKET_META_SIZE, len) + PACKET_META_SIZE;
      default:
        return 0;
      }
    }
    return 0;
  }

  dev_type_t packet_decode(uint8_t * buf, uint32_t size, uint32_t estimated, struct packet_t * packet) {
    if (size < PACKET_META_SIZE) return 0;
    if (buf[0] != 0xA5 || buf[1] != 0x5A) {
      return 0;
    }
    uint32_t len = buf[7];
    if (len + PACKET_META_SIZE > size) return 0;
    uint32_t checksum = adler32(buf + 2 + 4, len + 2);
    if ((buf[2] == (checksum & 0xFF)) &&
        (buf[3] == ((checksum >> 8) & 0xFF)) &&
        (buf[4] == ((checksum >> 16) & 0xFF)) &&
        (buf[5] == ((checksum >> 24) & 0xFF))) {
      packet->dev_type = buf[6] & 0x70;
      packet->devid = buf[6] & 0x0F;
      uint8_t tmp[estimated];
      switch (packet->dev_type) {
      case CARD_READER:
        card_payload_decode_zeropack(buf + PACKET_META_SIZE, size, tmp, &packet->payload.card_reader);
        return CARD_READER;
      case COMMON:
        common_payload_decode_zeropack(buf + PACKET_META_SIZE, size, tmp, &packet->payload.common);
        return COMMON;
      default:
        return 0;
      }
    }
    return 0;
  }
#+end_src
** 在线状态封包
在线状态包是上位机发出的广播吧，其定义引用自上位机。
#+begin_src lisp :tangle /dev/shm/card-reader/common.tr
  (struct common-payload
    (int 0 sn) ;; 请求序列号
    (byte 1 online) ;; 命令编号
    )
#+end_src
